Version7:
This is version 7. I now pause() under JOB instead of busy-waiting using
wait3(). Instead SIGCHLD is caught by checkjobs(), which wait3()s to get
the child's new status, and sets a global which will cause waitfor() to
break out of its pause() loop. SIGTSTP is caught by stopjob() still.

Version8:
This version sets TOSTOP to stop output in the background. It also can
sucessfully bring processes to and from background + stopped.
For some reason, pipes fail dismally. Fixed, I wasn't closing all the fds :-(
Also ^Z sometimes calls the shell's parent & not shell??
Is exec() getting the bckgnd flag for all processes in a pipeline?

Version9:
This version sets TOSTOP to stop output in the background. It also can
sucessfully bring processes to and from background + stopped.
^Z doesn't tromp the shell now (that I can tell).
Still can't get SIGTTIN to work :-(

Version10:
I've added the cbreak stuff (unused as yet), and also made parse use a
line buffer. This is so I can import clam's CLE and add that.

Version11:
Added the CLE, with some bits hacked out so that I don't use history or
file name completion. It seems to work :-)

Version12:
Added some comments, added ifdefs for it to compile under Minix, which it
does, although bcc won't pass structs - therefore should pass a struct
ptr in invoke/redirect. Also added some job code, but not tested as yet -
I'm running under Minix ;-)

Version13:
Changed BOOLEAN to bool, altered the rdrct usage to allow bcc to compile it.
Also moved ^G to \007, serves me right for cutting & pasting :-).
Wish there was an easy way to save diffs - dump?

Version14:
Installed the job code to keep a job list, and it works. I should
add %job numbers, which should be easy. Seems the terminal chars are
not being unset properly, as vi won't go into cbreak mode. Why?

Version15:
Added % handling into fg & bg, plus cwd support. Bugs & kludges:
	vi still doesn't go
	after fg, shell waiting not on fg'd process
	headpid is a _kludge_, I must fix
Apart from that, it's all rather well.

Version16:
The problem with vi was that TERMCAP was too long for the var routines. Just
don't define it. I now use currentjob everywhere, and Head* no longer exist.
It all works quite well now, yummo!!! I haven't moved it back to Minix since
version thirteen, probably some missed #defines etc.

Version17:
I've written my own clex.c to find files, binaries, usernames, and have
added it to the shell. `Nameopt' works, but I'm not sure how to indicate
the first word on the line. `Complete' is probably buggy, I haven't
installed it yet. Changed yankprev to return the 1st position, and so
bug a) is fixed. I am using a `dummy' path at the moment, and should
use the `real' one.

Fixed complete to work, which it appears to do. Also I am now using the
real path, and that works as well. I even made sure I was free()ing
all the malloc'd stuff!! Ta da!

Version18:
v17 compiles no worries under Minix (bcc), but I get a malloc assert error
+ core dump when expanding ~ - I wonder why? Even does under ACK :-( Only
when I print them out. Weird, I nedd to malloc a few extra bytes, also
expand sometimes expands to the biggest :-(, not just ~. Fixed, a bug in
expand. Now I should make it continue expanding ~blah/ as a directory.
Added match() and matchdir(), plus a hacked-up meta_2(), and it works. I
really want to convert meta/parse to use a linked list of words instead of
a single line, then we can malloc as we find words, and save copying too.

Version19:
Well, parse now parses the carray, and meta now puts things in there, and
qsorts after a *?[], so it's all rather nice. I think gettoken needs a bit
of a rewrite as I just hacked it a lot, and it dies when using ""s. I don't
know if I'll have to insert into the carray when expanding all the meta's,
or just append as I'm doing now. Oh well, we'll soon see.
Altered clex to see ~ as a directory when there is a / in it, simple. I
should write a meta_1 to expand ~ as well I guess.

Version20:
Meta now uses a singly linked list so it can insert words, and meta_1 now
expands tilde. Parse now runs with the linked list, wow it works! Tilde() also
expands ~/ now, so ~ *?[] all fully work!

Version21:
Hist.c is added but not yet connected to anything, but the code is simple
so there should be no problem. Savehist & history connected, ^Js at end of
each history?! Fixed. Also connected ^P and ^N, which work happily! Tried
to add !, but forgot I must convert from line to linked list, sigh. Did
this, had to always malloc in meta_1, which I will fix. Also !word & !num
work, but !! and !-num don't :-( Fixed, calculating old histnum wrong.
Currently saving histories with ! in them, should save after expanding !.

Version22:
Added a routine to expand the word linked list after meta_1, so that savehist
now gets a line without !! etc. I must remember to not strcpy, as expline()
mallocs already. Done. Added a simple echo to builtin.c, in case I ever lose
ls(1). Now about to tidy up comlined, remove the fileno()s. Seems to work.
Also got rid of zin,zout. Bug, > appears not to work, but >> does. Fixed.
Went back to a line parser in parse, now that expline() exists.  Bug, when
history skips a number (duplicate), the number is lost too.

Version23:
Starting on adding variable expansion to the shell. Wow, meta_2 now calls
dollar, which expands $var, $$, $#, $0... correctly :-) Doing $* will
involve inserting into the carray. Also made set look like Clam's list,
and added a shift builtin :-) Added $*, but because I'm not ignoring things
like * ' & " yet, I had to make it $@ to go. I'll fix it later. To do: fix
var.c to use a linked list & have arbitrary-sized values. Fixed EVinit to
accept arbitrary-sized env names, and fixed prints to use a 1024-byte buffer,
although this should be malloc'd or realloc'd. This fixed the vi bug somehow.

Version24:
I'm trying to get meta to understand single and double quotes. I've rearranged
meta a bit. We now have:

	meta_1 forms words, or quoted charaters, and parses !
		savehist here
	meta_2 parses $ and ~
	meta_3 parses * ? and []

Meta_2 should strip away double quotes, and parse $ and ~ in double quotes.
Stripping single quotes I've left for the command parser. I'd still prefer a
parser that works on the carray and not a string, sigh. Also, to do eventually,
make _everything_ modular i.e defines in header.h for CLE or not, history or
not, as well as script, job control etc. Make these dependent on the machine
defined, and thus only define one thing on a compile line. Done, and seems
to work quite well. New bug: !! doesn't give last line, but line before that.
Fixed, although saw a `random' infinite loop expanding !!, don't know why.
Also, % fred='*.c' doesn't work. Hmm, perhaps treating quote pairs as words
is wrong, e.g echo hello'$'$cat"q*" really has only two words, not five as
it is at the moment.

Version25:
Meta_1 now breaks the line into wordlets, where a wordlet may end in a space,
or be enclosed in "" or '', and later ``. To ensure spaces are preserved, the
carray mode is now a bitfield, with the bit C_SPACE indicating if there's a
space. So	echo fred cat'jim'dog is the list:

	echo	C_SPACE
	fred	C_SPACE
	cat
	'jim'
	dog

I had to change most of meta to use C_SPACE, and expline to expand when
it saw C_SPACE, but now I can get meta_2 & meta_3 to properly parse the
carray. It seems to work quite well, surprisingly. Also sat down and
drew the routine connectivity on a file-by-file basis, found a few routines
I don't use yet. Changed main() so that lines starting with # are ignored
totally, much better.

Clam appears to expand `` before *, so I must do that too.

ToDo: When replacing a word by its meta expansion, make sure the
last part of the expansion has the old C_SPACE bit, and all the other
words in the expansion have C_SPACE on.

Other ideas: (I should start a separate list)

	Make list of things in sh, csh, tcsh & ksh worth adding
	Shell debugger - extra builtins like step & debug
	Add aliases & the prompt variable
	Ifdefing - CLE, ALIAS, SCRIPT, HIST
	Add a dumb CLE for file reading
	Proper binding: bind string string
	Tidy up code, esp. comlined & job
	Remove static limits on vars & add dimensionality
	Add other sh $ things
	Change header so only specify machine type on compile line
	$precmd, maybe?

Just cut out and added Callum's prprompt() to main.c, and it works!
I just can't do prompt='string', because '' fails for some reason.

Version26:
I've just added proper key binding, i.e bind string string, and it's
recursive to boot, and there's a 512-char limit on expansion, and it appears
to work at least for normal strings. I can't seem to bind ^[[D to ^[b ???
A bug in getcomcmd(), now fixed, and binding truly works!! I took v25 home
and compiled it under 16-bit & 32-bit Minix, a few slight changes as the
ACK compiler is picky. Code size is 26K under ACK, 40K under bcc.
Time to tidy up the code before adding more stuff. Made builtin much more
elegant, still works. Job control is playing up, must investigate. Clex is
pretty compact, but needs more comments. Comlined really needs attacking.
I've done some reformatting in getuline(), but I should try & unduplicate
code. Took feature_off out of getuline(), no problems. Reduced insert(),
overwrite() and show() down to one function, Show(). Also made goend() a
part of Show, missed the go() at the end & initially didn't work. I wonder if
it would be possible to use only one curs[]? Yep, seems to work :-)
Moved code to pyramid, problems with direct, not dirent & also strtok etc.
Fixed in header.h, also changed Makefile & header.h so only have to specify
machine in Makefile. Merged delprevword & backword, also delnext & forword,
now to try & add the yank stuff into that. Done that too. Wonder if I can
remove yankbuf as f'n arguments. Yep, sure can, had to do it in clex too.
Also am now using a variable $wordterm, or a default string, to find the
end of words e.g ^w, ^[b etc. Time to save all these changes.

Version27:
Tidied up header.h a bit. We might need USES_DIRECT for direct/dirent stuff.
Have added this. Also `ported' back to pyramid, both ucb and att, and finally
fixed up the termcap stuff, and now works with no defines under both universes.
Added some comments to clex. I won't touch exec or parse yet as they both need
a lot of work done on them. Finally removed the last bit of global, now in
builtin.c. Tidied term and signal up, replaced prints with the Clam 1.4.3
version with VARARGS & STDARG & modified header.h to reflect this. Tidied
main up a bit too. Took the current version home & tidied up hist & job, and
made the varlist a linked list. Time to lint it, this ought to be fun! I
ignored all the pass 2 & 3 stuff, impossible to fix. A problem with bool as
an enum, because I use it so often with ints. I may convert all to ints.
Hmm, job control is still playing up, I don't know why.

Version28:
I radically changed meta_1 over the weekend to produce a carray list of
wordlets, with parsing of special symbols like ; | || && >> n> etc. These
are stored in the carray with name==NULL & mode holding a bit pattern
indicating the symbol stored. Of course I'm exit()ing way before I get to the
parser at the moment. meta_2 copes with the symbols now! Even meta_3 appears
to work with this, now all I have to do now is rewrite the parser, sigh :-S.
Done, at least a provisional one. Gettoken just returns a token or a word,
but should strcat non-C_SPACE'd word together where necessary. I think I
fixed the job problem, don't set current job in every addjob(). Expline has
to be fixed to fill in the symbols known. Done, but even better would be to
save the history as a LL, and would speed expanding ! in meta_1. Yes, but
still have to expand line when doing ^P then. I'll leave it for now. Put
history expansion back into meta_1 with no problems.

Time to do file input. I created routines fileopen(), getfileline() and
source() in file.c. getfileline() does a stdio-like buffering, using
the yankbuf as a 512-byte buffer. Currently source() just prints out the
lines it reads; I should extract the { getline(); do_meta(); command(); }
loop and make it a separate routine, use a f'n ptr for getline(), and so
avoid code duplication. Ok, made the call to getuline() in main() as a f'n
ptr. Moved the loop code to doline(), which now returns false when no input
left, tidied things up, and now have a rudimentary source!!

Looks like a new version time. I still have to work out what to do with =.
Probably I'll treat it simply as just an end of word char, and force asg()
to be called when lastchar(argv[0])=='=', how does that sound???

Version29:
I'm compiling Callum's alias.c, modified to use the new getfileline(). I'm
just getting a .o file at the moment, I haven't done the builtins yet.
I should modify redirect() to take a structure of 10 `things' which tell it
how/what to open for each fd 0-10, and to dup2 each fd to fd+10, returning
the same sort of structure for the dup2'd fds. Thus I could have a for loop
to do all the work. Another ToDo: save the tty state at startup, and before we 
get a userline restore to that state, so processes leaving us in nl state won't
affect us. Would like to still allow stty speed changes etc.

Ok, alias compiles, added the alias() & unalias() builtins, -e is cut at
the moment, everything appears to work but alias -l. Fixed, I forgot an
argument. Of course I now need a getaliasline() for (*getline)() to point to,
and then I could have aliases working. I bet it won't be as simple. Wrote
a getaliasline(), munged up a runalias() which ignores argv & envp. It sort
of works, but for some reason the shell goes away after the alias is run.
Also does it with source(), grrr. Fixed, sort of, main() now loops
indefinitely instead of checking doline()s return value. Must fix doline()
by moving setcbreak, prprompt etc to comlined. Done.

More ToDo stuff, I should make a separate wishlist file:

	tilde [-l]		show user-defined/all ~ directories
	tilde short dir		make dir accessible as ~short
	untilde short		remove short from list

	Have a MODE key in CLE, and an UNMODE key too.
	Mark some binds as `mode only' via bind -m
	This will allow vi thru bindings
	Also need a BEEP key, to bind useless keys to BEEP
